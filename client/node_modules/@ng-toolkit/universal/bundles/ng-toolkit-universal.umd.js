(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ng-toolkit/universal', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = global || self, factory((global['ng-toolkit'] = global['ng-toolkit'] || {}, global['ng-toolkit'].universal = {}), global.ng.core, global.ng.common));
}(this, (function (exports, core, common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WindowService = /** @class */ (function () {
        function WindowService(platformId) {
            if (!common.isPlatformBrowser(platformId)) {
                // const req: any = this.injector.get(this.injector.get(USERAGENTTOKEN));
                // this._window = {navigator: {userAgent: req.get('User-Agent')}};
                this._window = (/** @type {?} */ ({ navigator: { userAgent: 'fakeAgent' } }));
            }
            else {
                this._window = window;
            }
        }
        Object.defineProperty(WindowService.prototype, "nativeWindow", {
            get: /**
             * @return {?}
             */
            function () {
                return this._window;
            },
            enumerable: true,
            configurable: true
        });
        WindowService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        WindowService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
        ]; };
        return WindowService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        WindowService.prototype._window;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LocalStorageWrapper = /** @class */ (function () {
        function LocalStorageWrapper(platformId) {
            if (common.isPlatformBrowser(platformId)) {
                this.localStorageRef = localStorage;
            }
            else {
                this.localStorageRef = {
                    clear: (/**
                     * @return {?}
                     */
                    function () { }),
                    getItem: (/**
                     * @param {?} key
                     * @return {?}
                     */
                    function (key) { return (/** @type {?} */ (undefined)); }),
                    key: (/**
                     * @param {?} index
                     * @return {?}
                     */
                    function (index) { return (/** @type {?} */ (undefined)); }),
                    removeItem: (/**
                     * @param {?} key
                     * @return {?}
                     */
                    function (key) { }),
                    setItem: (/**
                     * @param {?} key
                     * @param {?} value
                     * @return {?}
                     */
                    function (key, value) { }),
                    length: 0
                };
            }
        }
        Object.defineProperty(LocalStorageWrapper.prototype, "localStorage", {
            get: /**
             * @return {?}
             */
            function () {
                return this.localStorageRef;
            },
            enumerable: true,
            configurable: true
        });
        LocalStorageWrapper.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        LocalStorageWrapper.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
        ]; };
        return LocalStorageWrapper;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        LocalStorageWrapper.prototype.localStorageRef;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DocumentService = /** @class */ (function () {
        function DocumentService(platformId) {
            if (!common.isPlatformBrowser(platformId)) {
                this._document = (/** @type {?} */ ((/** @type {?} */ ({
                    getElementById: (/**
                     * @param {?} id
                     * @return {?}
                     */
                    function (id) { return new HTMLElement(); }),
                    getElementsByClassName: (/**
                     * @param {?} className
                     * @return {?}
                     */
                    function (className) { return new HTMLCollection(); }),
                    getElementsByName: (/**
                     * @param {?} name
                     * @return {?}
                     */
                    function (name) { return new NodeList(); }),
                    getElementsByTagName: (/**
                     * @param {?} name
                     * @return {?}
                     */
                    function (name) { return new NodeList(); })
                }))));
            }
            else {
                console.log('in browser, assigning document');
                // this._document = document;
                this._document = (/** @type {?} */ ({}));
            }
        }
        Object.defineProperty(DocumentService.prototype, "nativeDocument", {
            get: /**
             * @return {?}
             */
            function () {
                console.log('get native document');
                console.log(this._document);
                return this._document;
            },
            enumerable: true,
            configurable: true
        });
        DocumentService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        DocumentService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
        ]; };
        return DocumentService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        DocumentService.prototype._document;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var WINDOW = new core.InjectionToken('ng-toolkit-window');
    /**
     * @param {?} windowService
     * @return {?}
     */
    function windowFactory(windowService) {
        return windowService.nativeWindow;
    }
    /** @type {?} */
    var LOCAL_STORAGE = new core.InjectionToken('ng-toolkit-local-storage');
    /**
     * @param {?} localStorageWrapper
     * @return {?}
     */
    function localStorageFactory(localStorageWrapper) {
        return localStorageWrapper.localStorage;
    }
    /** @type {?} */
    var NGT_DOCUMENT = new core.InjectionToken('ng-toolkit-document');
    /**
     * @param {?} documentService
     * @return {?}
     */
    function documentFactory(documentService) {
        console.log('document factory');
        return documentService.nativeDocument;
    }
    var NgtUniversalModule = /** @class */ (function () {
        function NgtUniversalModule() {
        }
        NgtUniversalModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [
                            WindowService,
                            { provide: WINDOW, useFactory: windowFactory, deps: [WindowService] },
                            DocumentService,
                            { provide: NGT_DOCUMENT, useFactory: documentFactory, deps: [DocumentService] },
                            LocalStorageWrapper,
                            { provide: LOCAL_STORAGE, useFactory: localStorageFactory, deps: [LocalStorageWrapper] }
                        ]
                    },] }
        ];
        return NgtUniversalModule;
    }());

    exports.DocumentService = DocumentService;
    exports.LOCAL_STORAGE = LOCAL_STORAGE;
    exports.NGT_DOCUMENT = NGT_DOCUMENT;
    exports.NgtUniversalModule = NgtUniversalModule;
    exports.WINDOW = WINDOW;
    exports.documentFactory = documentFactory;
    exports.localStorageFactory = localStorageFactory;
    exports.windowFactory = windowFactory;
    exports.ɵa = WindowService;
    exports.ɵb = LocalStorageWrapper;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng-toolkit-universal.umd.js.map
